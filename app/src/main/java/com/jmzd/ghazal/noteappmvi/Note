پکیج بندی پروژه------------------------------------------------------------------------------------
پکیج بندی پروژه دقیقا مثل پکیج بندی MVP و MVVM است به صورت کلی
عمده فایل های پروژه مثل قبل هستن  و مستقیما از پروژه mvvm کپی شدن
(فایل های utils - di - database - server - repository )
فایل های ریپازیتوری هم عینا مثل قبل هستن چون فلسفه ریپازیتوری توی همه معماری ها یکسانه
مثلا توی اپلیکیشن های آنلاین میشه ارور کدها رو توش هندل کرد
فقط یک پکیج viewModel رو بیشتر داریم که تمام بخش های intent - state و ... میره توش
جلوتر یاد میگیریم
اصل کار این معماری داخل پکیج ویو است.
مدیریت تمام صفحات اینجا اتفاق می افته

Toolbar---------------------------------------------------------------------------------------------
نکته یادآوری:
زمانی که توی  کد از setSupportActionBar استفاده میکنیم تم ما حتما باید noActionBar باشد
در غیر این صورت با کرش رو به رو میشیم

pop up fragment-------------------------------------------------------------------------------------
یادآوری:
addNoteBtn.setOnClickListener { NoteFragment().show(supportFragmentManager, NoteFragment().tag) }
این تگی که اضافه میکردیم برای مدریت کارهای مربوط به پشته و استکه
میشه دستی یک استرینگی داد یا از تگ خود فرگمنت استفاده کرد

spinners--------------------------------------------------------------------------------------------
از تامین کردن اطلاعات داخل اسپینرها شروع میکنیم
دیتای اسپینرها رو خودمون قراره تولید کنیم
ولی به هر  حال قراره از یک جای دیگه تامین شه
توی توضیحات MVI گفتیم که ویو (اکتیویتی - فرگمنت) کارهای مربوط به دیتا و اینجور چیزا رو انجام نمیده
کلا ایده ای هم نداره که این اطلاعات از کجا میاد و کجا میره
صرفا یه سری متد رو فراخوانی میکنه

توی MVVM چیکار میکردیم؟
میومدیم این اطلاعات رو داخل ویومدل مینوشتیم
چون هندل کردن و تامین دیتای ویو با ویومدل بود

ما توی MVI ویومدل رو داریم و دقیقا همون تعریف و عملکردی رو داره که توی MVVM داشت

از طرفی چیزهای دیگه ای هم نیاز داریم. چه چیزی؟
گفتیم به اینتنت نیاز داریم
که به ما کمک میکنه که بفهمیم توی این صفحه مورد نظر به چه عملیاتی نیاز داریم

#State
بعد از اون طبق اسلایدها به مدل نیاز داریم
که گقتیم وظیفه ش مدیریت کردن وضعیت یا state های برنامه ماست
مثلا چه state هایی داریم؟
توی سناریوی اسپینرها نیاز به یک state دارم که بفهمم اطلاعات این اسپینرها تامین شده یا خیر
اگر تامین شده و اطلاعات رو داره بیاد به ویو بده

اینکه ویو قراره چطوری این اطلاعات رو به کاربر نشون بده دیگه ربطی به مدل نداره

پس من به یک stateی نیاز دارم که بفهمم اولا اطلاعات این تامین شده یا نه که بتونم باش کار کنم
و state بعدی اینه که ممکنه با ارور رو به رو شم.
مثلا روی دکمه سیو که میزنم دیتابیس بترکه یا هر چی.
پس یک state هم دارم که بتونم به کابر ارور احتمالی رو نشون بدم

مورد بعدی اینکه روی دکمه سیو که زد ذخیره شده یا نه؟
به واسطه اون مثلا توست نشون بدم یا صفحه رو ببندم

چون state یه ذره راحت تر بود اول گفتیمش
ولی به ترتیب که بیایم کاربر اول با اینتنت کار داره بعد مدل بعد ویو

#Intent
چطور باید اینتنت ها رو تشخیص بدم؟
اینتنت گفتیم عملیات یا اکشن های مختلف است
گفتیم این اکشن ها یا عملیات ها یا میتونن توسط کاربر ایجاد بشن یا میتونن توسط خود سیستم (من برنامه نویس) ایجاد بشن
مثلا به محض ورود کاربر به صفحه این اطلاعات لود بشه
توسط کاربر هم که میشه مثلا وقتی میزنه روی یک دکمه ای
مثلا حتی میشد دکمه ضربدر بستن صفحه رو با اینتنت ها هندل کرد
ولی کارمون پیچیده و طولانی میشد
یکی از ایراداتی که به MVI میگیرن همینه که اینقدر برای حالت های مختلف اکشن و استیت تعریف کردن
یعنی شما باید برای کوچک ترین حالت هم اکشن و استیت تعریف کنید
همین دکمه ضربدر باید یک اکشن و یک استیت میداشت مثلا
آدم اذیت میشه
هدف از استفاده از معماری ها اینه بمون کمک کنه و در صورتی که ببینیم اذیت میشیم میذاریمش کنار
ما هندل کردنشو یاد میگیریم ولی افراط نمیکنیم
چون کد رو شلوغ میکنه و حالت کثیف MVI میشه این. ما میخوایم یه MVI تر و تمیز و اصولی داشته باشیم

اولین اینتنتی که داریم توی سناریومون چیه؟
اطلاعات اسپینرها باید لود بشه
به محض ورود کاربر به صفحه صدا زده میشه

دومین اینتنتی که نیاز دارم چیه؟
زمانی که روی این دکمه سیو زد کاربر اطلاعات توی دیتابیس باید ذخیره شه

پایان توضیحات اولیه-------------------------------------------------------------------------------
داخل پکیج ویومدل به ازای هر صفحه ای که داریم یک پکیج میسازیم که مواردش میره داخلش

#Intent
کلاس اینتنت رو از نوع sealed class تعریف میکنیم نه کلاس عادی

sealed class :
به معنی کلاس مهر و موم شده است
ولی کارش چیه؟
وقتی میخوایم حالت های مختلف رو تعریف کنیم ولی فقط از یکیش استفاده کنیم
تقریبا شبیه enum است
نمیشه ازش آبجکت ساخت و برای استفاده باید ازش ارث بری کرد
توش میشه متد نوشت و بعد به متدها مثل استاتیک دسترسی پیدا کرد

حالا میایم اکشن هایی که بالاتر تحلیل کردیم نیاز داریم رو داخل این sealed class تعریف میکنیم
برای هر اکشنی از خودتون بپرسید: آیا من نیاز به ورودی دارم؟
مثلا برای دریافت اطلاعات اسپینر : خیر
برای سیو کردن : بله (مدل نوت)

میتونیم این اکشن ها را به صورت دیتا کلاس تعریف کنیم.

data class :
 کلاسیه که یک سری ورودی ها داره.
مثل setter & getter توی جاوا. که اینجا نیازی بهشون نداریم

پس ما داخل sealed class موارد رو در قالب کلاس تعریف میکنیم.
حالا یک راهش دیتا کلاسه و یک راه دیگه هم هست که جلوتر یاد میگیریم
پس به صورت فانکشن تعریف نمیکنیم

نکته خیلی مهم:
وقتی داریم از sealed class استفاده میکنیم حتما از اینتنت خودشون ارث بری کنن
خیلی  حواستون باشه. بعدا تعداد کلاس ها و ایناتون میره بالا مثلا اشتباهی از stateش ارث بری نکنید.
ارجاع بدید به خود همون sealed class

 data class SpinnerList() : DetailIntent()
وقتی به شکل بالا تعریف میکنیم و هیچ ورودی ای نداریم ارور میده که تو دیتا کلاس تعریف کردی ولی ورودی نداری هیچی
میشه کلاس ساده ش کرد که ارور نده. ولی راه حل اصلی چیه؟
این یک نکته کاتلینیه:
کافیه تبدیلش کنیم به آبجکت و پرانتزش هم حذف کنیم. آبجکت هیچ ورودی ای نداره
 object SpinnerList : DetailIntent()
این مثل حالت قل عمل میکنه بدون اینکه هیچ وارنینیگی نشون بده

پس شد:
 اگه ورودی نداشت آبجکت تعریف میکنیم بدون پرانتز اگه ورودی داشت دیتا کلاس
در هر دو صورت از اینتنت خودشون ارث بری مییکنن
چون کلاسن اسمشون با حروف بزرگ نوشته میشه

اگه ارجاع ندید به اینتنت ارور نمیگیرید الان ولی بعدا موقع استفاده نمیشناسه

#State
استیت هم sealed class است.
اینجا هم با منطق مشابه اگه قراره چیزی فرستاده شه به ویو با دیتاکلاس تعریف میکنیم
اگه نه آبجکت
از استیت خودش ارث بری میکنه

نکته:
ما دو تا اسپینر داریم.
میتونیم دو  تا کلاس جدا برا استیت هاشون تعریف کنیم
ولی اینا رو هم زمان میخوایم
و با توجه به اینکه میخوایم از کانال های کروتین استفاده کنیم و ویژگی هاشون
و نمیخوایم دیلی هم بندازیم اول اینو بفرس بعد اونو
پس میایم چیکار میکنیم؟
اون دو تا چیزی که قراره با هم هم زمان اتفاق بیفتن
ورودی هاشون را با هم در یک کلاس در نظر میگیریم
این دو تا خیلی شبیه همن. نحوه تامین اطلاعاتشون. هم زمان اتفاق می افتن...
به این هم زمانی خیلی دقت کنید...
